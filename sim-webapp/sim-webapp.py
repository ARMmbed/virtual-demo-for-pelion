#!/usr/bin/env python
#
# Pelion Device Management SDK
# (C) COPYRIGHT 2017 Arm Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# --------------------------------------------------------------------------
"""Pelion virtual demo bootstrap."""

import logging
import os
import subprocess

import tornado.escape
import tornado.ioloop
import tornado.options
import tornado.web
import tornado.websocket
from mbed_cloud import AccountManagementAPI, CertificatesAPI
from tornado.options import define, options

define("port", default=8888, help="run on the given port", type=int)

config = {}


class Application(tornado.web.Application):
    def __init__(self):
        handlers = [(r"/", MainHandler), (r"/comsock", ComSocketHandler)]
        settings = dict(
            cookie_secret="__TODO:_GENERATE_YOUR_OWN_RANDOM_VALUE_HERE__",
            template_path=os.path.join(os.path.dirname(__file__), "templates"),
            static_path=os.path.join(os.path.dirname(__file__), "static"),
            xsrf_cookies=True,
        )
        super().__init__(handlers, **settings)


class MainHandler(tornado.web.RequestHandler):
    def get(self):
        self.render("index.html")


class ComSocketHandler(tornado.websocket.WebSocketHandler):
    waiters = set()

    def get_compression_options(self):
        # Non-None enables compression with default options.
        return {}

    def open(self):
        logging.info("open(self)")
        ComSocketHandler.waiters.add(self)

    def on_close(self):
        logging.info("on_close(self)")
        ComSocketHandler.waiters.remove(self)

    @classmethod
    def send_update(cls, chat):
        logging.info("sending message to %d waiters", len(cls.waiters))
        for waiter in cls.waiters:
            try:
                waiter.write_message(chat)
            except:
                logging.error("Error sending message", exc_info=True)

    def on_message(self, message):
        logging.info("got message %r", message)


def gencert():
    accounts = AccountManagementAPI(config)
    certs = CertificatesAPI(config)

    api_key_value = accounts.config.get("api_key")
    api_key = next(accounts.list_api_keys(
        filter={
            "key": api_key_value
        }
    ))

    certificates_owned = list(certs.list_certificates())
    dev_cert_info = None
    for certif in certificates_owned:
        if certif.type == "developer" and (certif.owner_id == api_key.owner_id or
                                           certif.owner_id == api_key.id):
            dev_cert_info = certs.get_certificate(certif.id)
            logging.info("Found developer certificate named '%s'",
                         dev_cert_info.name)
            break
    else:
        logging.warning(
            "Could not find developer certificate for this account."
            " Generating a new developer certificate."
        )
        dev_cert_info = certs.add_developer_certificate(
            "mbed-cli-auto {}".format(api_key.name),
            description="cetificate auto-generated by pelion-device-simulator"
        )

    logging.info("Writing developer certificate '%s into c file "
                 "'mbed_cloud_dev_credentials.c'", dev_cert_info.name)
    with open("/build/mbed-cloud-client-example/mbed_cloud_dev_credentials.c", "w") as fout:
        fout.write(dev_cert_info.header_file)


def build():
    # spawn process to build pelion-client
    subprocess.Popen(['make', 'mbedCloudClientExample.elf'],
                     cwd='/build/mbed-cloud-client-example/__x86_x64_NativeLinux_mbedtls').wait()


def _main():
    tornado.options.parse_command_line()

    try:
        config["api_key"] = os.environ['CLOUD_SDK_API_KEY']
    except KeyError as e:
        logging.error(
            'Missing CLOUD_SDK_API_KEY environmental key !'
        )
        exit(1)

    try:
        # first-time invocation ?
        open("firstrun", 'x')
        # ..since we reach here, yes
        # let's generate dev certificate
        gencert()
        # and build the application
        build()
    except FileExistsError:
        pass

    # lunch pelion client in a separate process
    subprocess.Popen(['./mbedCloudClientExample.elf'],
                     cwd='/build/mbed-cloud-client-example/__x86_x64_NativeLinux_mbedtls/Release/')

    # lunch web app
    app = Application()
    app.listen(options.port)
    tornado.ioloop.IOLoop.current().start()


if __name__ == "__main__":
    _main()
